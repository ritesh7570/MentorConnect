<%- layout("mentee/layouts/boilerplate") %>

<div class="container mt-3">
    <h1>
        <center> Chat with <%= secondPerson.name %> </center>
    </h1>

    <div id="chatBox" class="chat-box border rounded p-3 mb-3">
        <% if (chat.messages.length === 0) { %>
        <p class="text-muted">No messages yet. Start the conversation!</p>
        <% } else { %>
        <% chat.messages.forEach(message => { %>
        <div class="<%= message.sender._id === loggedInUser.id ? 'text-end' : 'text-start' %> mb-2">
          
            <p class="m-0"><%= message.text %></p>
            <small class="text-muted"><%= new Date(message.timestamp).toLocaleString() %></small>
        </div>
        <% }); %>
        <% } %>
    </div>

    <!-- Message Input -->
    <form id="chatForm" class="d-flex align-items-center">
        <input type="text" id="messageInput" class="form-control me-2" placeholder="Type your message..." required />

        <!-- Font Awesome Icon for Sending Message -->
        <button type="submit" class="btn btn-transparent">
            <i class="fas fa-paper-plane fa-lg"></i> <!-- Font Awesome Send Icon -->
        </button>
    </form>

</div>

<script src="/socket.io/socket.io.js"></script> <!-- Include Socket.IO library -->
<script>
    const socket = io(); // Connect to the server
    const chatId = "<%= chat._id %>"; // Chat room ID
    const userId = "<%= loggedInUser.id %>"; // Logged-in user ID

    // Join the chat room
    socket.emit("joinRoom", chatId);

    // Scroll the chat box to the bottom
    function scrollToBottom() {
        const chatBox = document.getElementById("chatBox");
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    // Append a new message to the chat box
    function appendMessage(senderId, text, timestamp) {
        const chatBox = document.getElementById("chatBox");
        const messageDiv = document.createElement("div");
        messageDiv.className = senderId === userId ? "text-end mb-2" : "text-start mb-2";

        messageDiv.innerHTML = `
            <p class="m-0">${text}</p>
            <small class="text-muted">${new Date(timestamp).toLocaleString()}</small>
        `;

        chatBox.appendChild(messageDiv);
        scrollToBottom(); // Scroll to the bottom after appending a new message
    }

    // Listen for new messages from the server
    socket.on("message", (message) => {
        appendMessage(message.sender, message.text, message.timestamp);
    });

    // Handle message submission
    document.getElementById("chatForm").addEventListener("submit", (event) => {
        event.preventDefault();
        const messageInput = document.getElementById("messageInput");
        const text = messageInput.value;

        // Send message to the server
        socket.emit("newMessage", { chatId, senderId: userId, text });

        // Clear the input box
        messageInput.value = "";
    });

    // Scroll to the bottom when the page loads
    window.onload = scrollToBottom;

    const mentorId = "<%= secondPerson._id %>"; // Mentor's ID
const menteeId = "<%= loggedInUser.id %>"; // Mentee's ID

// Function to check if the chat is enabled
async function checkChatEnabled() {
    try {
        const response = await fetch(`/chat-enabled/${mentorId}/${menteeId}`);
        const data = await response.json();

        const messageInput = document.getElementById("messageInput");
        const chatForm = document.getElementById("chatForm");

        if (data.chatEnabled) {
            messageInput.disabled = false;
            messageInput.placeholder = "Type your message...";
        } else {
            messageInput.disabled = true;
            messageInput.placeholder = "Chat is only available during your scheduled session.";
        }
    } catch (error) {
        console.error("Error checking chat status:", error);
    }
}

// Call the function on page load and periodically
window.onload = () => {
    checkChatEnabled();
    setInterval(checkChatEnabled, 60000); // Check every minute
};

</script>